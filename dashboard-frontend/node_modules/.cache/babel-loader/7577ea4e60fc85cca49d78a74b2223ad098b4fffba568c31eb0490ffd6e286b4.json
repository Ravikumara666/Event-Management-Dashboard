{"ast":null,"code":"var _jsxFileName = \"/Users/dravikumara/Desktop/http/Event Management Dashboard/dashboard-frontend/src/components/AttendeeManagement/AttendeeList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AttendeeList() {\n  _s();\n  const [attendees, setAttendees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAttendees = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/attendees');\n        setAttendees(response.data); // Store the API response in state\n        setLoading(false); // Set loading to false after data is fetched\n      } catch (error) {\n        setError(error.message); // If an error occurs, set the error message\n        setLoading(false); // Set loading to false even if there's an error\n      }\n    };\n    fetchAttendees();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Attendees List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: attendees.map(attendee => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [attendee.name, \" (\", attendee.email, \") - \", attendee.phone]\n      }, attendee.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(AttendeeList, \"Fkw0Tv5Kv0J1xCEo79FlIncImCI=\");\n_c = AttendeeList;\nexport default AttendeeList;\nvar _c;\n$RefreshReg$(_c, \"AttendeeList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","AttendeeList","_s","attendees","setAttendees","loading","setLoading","error","setError","fetchAttendees","response","get","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","attendee","name","email","phone","id","_c","$RefreshReg$"],"sources":["/Users/dravikumara/Desktop/http/Event Management Dashboard/dashboard-frontend/src/components/AttendeeManagement/AttendeeList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction AttendeeList() {\n  const [attendees, setAttendees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchAttendees = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/attendees');\n        setAttendees(response.data); // Store the API response in state\n        setLoading(false); // Set loading to false after data is fetched\n      } catch (error) {\n        setError(error.message); // If an error occurs, set the error message\n        setLoading(false); // Set loading to false even if there's an error\n      }\n    };\n\n    fetchAttendees();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Attendees List</h2>\n      <ul>\n        {attendees.map((attendee) => (\n          <li key={attendee.id}>\n            {attendee.name} ({attendee.email}) - {attendee.phone}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default AttendeeList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,iCAAiC,CAAC;QACnEP,YAAY,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;QAC7BN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC;QACzBP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIJ,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAc,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAIX,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAc,QAAA,GAAK,SAAO,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClC;EAEA,oBACElB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBlB,OAAA;MAAAc,QAAA,EACGX,SAAS,CAACgB,GAAG,CAAEC,QAAQ,iBACtBpB,OAAA;QAAAc,QAAA,GACGM,QAAQ,CAACC,IAAI,EAAC,IAAE,EAACD,QAAQ,CAACE,KAAK,EAAC,MAAI,EAACF,QAAQ,CAACG,KAAK;MAAA,GAD7CH,QAAQ,CAACI,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEhB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAChB,EAAA,CAxCQD,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA0CrB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}