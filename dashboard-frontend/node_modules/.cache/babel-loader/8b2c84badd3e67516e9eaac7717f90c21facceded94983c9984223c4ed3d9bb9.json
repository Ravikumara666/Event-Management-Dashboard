{"ast":null,"code":"var _jsxFileName = \"/Users/dravikumara/Desktop/http/Event Management Dashboard/dashboard-frontend/src/component/CalendarView.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventCalendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [markedDates, setMarkedDates] = useState([]);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const eventData = await fetch(\"/api/events\").then(res => res.json());\n      setEvents(eventData);\n      const dates = eventData.map(event => new Date(event.date));\n      setMarkedDates(dates);\n    };\n    fetchEvents();\n  }, []);\n  const tileContent = ({\n    date\n  }) => {\n    if (markedDates.some(markedDate => markedDate.toDateString() === date.toDateString())) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-2 h-2 rounded-full mx-auto mt-1 bg-red-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"w-full max-w-md mx-auto bg-gray-900 border-gray-800\",\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(CardTitle, {\n        className: \"text-xl font-bold text-white\",\n        children: \"Event Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          jsx: true,\n          children: `\n            .calendar-container :global(.react-calendar) {\n              width: 100%;\n              background-color: #111827;\n              border: none;\n              border-radius: 0.5rem;\n              padding: 1rem;\n            }\n            .calendar-container :global(.react-calendar__month-view__days__day) {\n              color: white;\n            }\n            .calendar-container :global(.react-calendar__navigation button) {\n              color: white;\n              min-width: 44px;\n              background: none;\n              font-size: 16px;\n              margin-top: 8px;\n            }\n            .calendar-container :global(.react-calendar__navigation button:enabled:hover),\n            .calendar-container :global(.react-calendar__navigation button:enabled:focus) {\n              background-color: #374151;\n            }\n            .calendar-container :global(.react-calendar__tile) {\n              padding: 1rem 0.5rem;\n              background: none;\n              text-align: center;\n              line-height: 16px;\n            }\n            .calendar-container :global(.react-calendar__tile:enabled:hover),\n            .calendar-container :global(.react-calendar__tile:enabled:focus) {\n              background-color: #374151;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__tile--now) {\n              background-color: #1F2937;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__tile--active) {\n              background-color: #2563EB;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__month-view__weekdays) {\n              text-align: center;\n              color: #9CA3AF;\n              text-transform: uppercase;\n              font-weight: bold;\n              font-size: 0.75rem;\n            }\n            .calendar-container :global(.react-calendar__tile--hasActive) {\n              background-color: #2563EB;\n            }\n            .calendar-container :global(.react-calendar__tile.event-date) {\n              color: #EF4444;\n              font-weight: bold;\n            }\n          `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n          tileContent: tileContent,\n          tileClassName: ({\n            date\n          }) => markedDates.some(markedDate => markedDate.toDateString() === date.toDateString()) ? \"event-date\" : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(EventCalendar, \"Dc8N8AXdxvl7oPikrWMdc4UengI=\");\n_c = EventCalendar;\nexport default EventCalendar;\nvar _c;\n$RefreshReg$(_c, \"EventCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardHeader","CardTitle","CardContent","jsxDEV","_jsxDEV","EventCalendar","_s","events","setEvents","markedDates","setMarkedDates","fetchEvents","eventData","fetch","then","res","json","dates","map","event","Date","date","tileContent","some","markedDate","toDateString","className","fileName","_jsxFileName","lineNumber","columnNumber","children","jsx","Calendar","tileClassName","_c","$RefreshReg$"],"sources":["/Users/dravikumara/Desktop/http/Event Management Dashboard/dashboard-frontend/src/component/CalendarView.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\n\nconst EventCalendar = () => {\n  const [events, setEvents] = useState([]);\n  const [markedDates, setMarkedDates] = useState([]);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const eventData = await fetch(\"/api/events\").then((res) => res.json());\n      setEvents(eventData);\n      const dates = eventData.map((event) => new Date(event.date));\n      setMarkedDates(dates);\n    };\n    fetchEvents();\n  }, []);\n\n  const tileContent = ({ date }) => {\n    if (markedDates.some((markedDate) => markedDate.toDateString() === date.toDateString())) {\n      return <div className=\"w-2 h-2 rounded-full mx-auto mt-1 bg-red-500\"></div>;\n    }\n    return null;\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto bg-gray-900 border-gray-800\">\n      <CardHeader>\n        <CardTitle className=\"text-xl font-bold text-white\">Event Calendar</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"calendar-container\">\n          <style jsx>{`\n            .calendar-container :global(.react-calendar) {\n              width: 100%;\n              background-color: #111827;\n              border: none;\n              border-radius: 0.5rem;\n              padding: 1rem;\n            }\n            .calendar-container :global(.react-calendar__month-view__days__day) {\n              color: white;\n            }\n            .calendar-container :global(.react-calendar__navigation button) {\n              color: white;\n              min-width: 44px;\n              background: none;\n              font-size: 16px;\n              margin-top: 8px;\n            }\n            .calendar-container :global(.react-calendar__navigation button:enabled:hover),\n            .calendar-container :global(.react-calendar__navigation button:enabled:focus) {\n              background-color: #374151;\n            }\n            .calendar-container :global(.react-calendar__tile) {\n              padding: 1rem 0.5rem;\n              background: none;\n              text-align: center;\n              line-height: 16px;\n            }\n            .calendar-container :global(.react-calendar__tile:enabled:hover),\n            .calendar-container :global(.react-calendar__tile:enabled:focus) {\n              background-color: #374151;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__tile--now) {\n              background-color: #1F2937;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__tile--active) {\n              background-color: #2563EB;\n              border-radius: 0.375rem;\n            }\n            .calendar-container :global(.react-calendar__month-view__weekdays) {\n              text-align: center;\n              color: #9CA3AF;\n              text-transform: uppercase;\n              font-weight: bold;\n              font-size: 0.75rem;\n            }\n            .calendar-container :global(.react-calendar__tile--hasActive) {\n              background-color: #2563EB;\n            }\n            .calendar-container :global(.react-calendar__tile.event-date) {\n              color: #EF4444;\n              font-weight: bold;\n            }\n          `}</style>\n          <Calendar\n            tileContent={tileContent}\n            tileClassName={({ date }) =>\n              markedDates.some((markedDate) => markedDate.toDateString() === date.toDateString())\n                ? \"event-date\"\n                : \"\"\n            }\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EventCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}